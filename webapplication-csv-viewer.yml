# Node.js Express Web App to Linux on Azure
# Build a Node.js Express app and deploy it to Azure as a Linux web app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master

variables:

 

  # Agent VM image name
  vmImageName: 'windows-latest'

stages:
    ######Build######

- stage: BuildArtifact
  displayName: Build Artifact
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - script: |
        cd WebApplication
    - task: NodeTool@0
      inputs:
        versionSpec: '14.x'
      displayName: 'Install Node.js'
      

    - script: |
        cd WebApplication && npm install
      displayName: 'npm install'
      

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/WebApplication'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

    
    #####Staging Release######

- stage: DeployToStage
  displayName: Deploy stage
  dependsOn: BuildArtifact
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: $(ENVIRONMENTSTG)
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          
          - task: AzureRmWebAppDeployment@4
            displayName: 'Azure App Service Deploy: $(WEBAPPNAME)'
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: '$(AZSUBSCRIPTON)'
              appType: 'webAppLinux'
              WebAppName: '$(WEBAPPNAME)'
              packageForLinux: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              RuntimeStack: 'NODE|14-lts'
              AppSettings: '-AZURE_STORAGE_CONNECTION_STRING $(AZURE_STORAGE_CONNECTION_STRING) -AZURE_STORAGE_CONTAINER $(AZURE_STORAGE_CONTAINER) -CSV_BLOB_FILE $(CSV_BLOB_FILE) -WEBSITE_RUN_FROM_PACKAGE $(WEBSITE_RUN_FROM_PACKAGE) -SCM_DO_BUILD_DURING_DEPLOYMENT $(SCM_DO_BUILD_DURING_DEPLOYMENT)'






#     ###### Teams Success Notification######

- stage: BuildNotificationsucceeded
  displayName: Teams Success Notification
  dependsOn: DeployToStage
  condition: succeeded()
  jobs:
    - job: Notification
      steps:
      - checkout: none
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            # Write your PowerShell commands here.
            
           
            $messageCardBody=@"
            { "@type": "MessageCard", "@context": "https://schema.org/extensions", "summary": "1 new build message", "themeColor": "0078D7", "sections": [ { "activityImage": "https://cdn2.iconfinder.com/data/icons/weby-flat-vol-1/512/1_Approved-check-checkbox-confirm-green-success-tick-512.png", "activityTitle": "Notification", "activitySubtitle": "Build and Release", "facts": [ { "name": "EnvName:", "value": "${env:ENVIRONMENTSTG}" }, { "name": "ApplicationName:", "value": "${env:WEBAPPNAME}" },{ "name": "BuildNumber:", "value": "$(Build.BuildNumber)" },{ "name": "BuildStatus:", "value": "$(Agent.JobStatus)" } ], "text": "Deployment to ${env:ENVIRONMENTSTG}", "potentialAction": [  ] } ] }
            "@
            echo ${messageCardBody}
            echo ${env:WEBAPPNAME}

            Invoke-RestMethod -uri ${env:WEBHOOKURL} -Method Post -body $messageCardBody -ContentType ‘application/json’

#     ###### Teams Failed Notification######

- stage: BuildNotificationFailed
  displayName: Teams Failed Notification
  dependsOn: DeployToStage
  condition: Failed()
  jobs:
    - job: Notification
      steps:
      - checkout: none
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            # Write your PowerShell commands here.
            
           
            $messageCardBody=@"
            { "@type": "MessageCard", "@context": "https://schema.org/extensions", "summary": "1 new build message", "themeColor": "0078D7", "sections": [ { "activityImage": "https://icon-library.com/images/failed-icon/failed-icon-7.jpg", "activityTitle": "Notification", "activitySubtitle": "Build and Release", "facts": [ { "name": "EnvName:", "value": "${env:ENVIRONMENTSTG}" }, { "name": "ApplicationName:", "value": "${env:WEBAPPNAME}" },{ "name": "BuildNumber:", "value": "$(Build.BuildNumber)" },{ "name": "BuildStatus:", "value": "Failed" } ], "text": "Deployment to ${env:ENVIRONMENTSTG}", "potentialAction": [  ] } ] }
            "@
            echo ${messageCardBody}
            echo ${env:WEBAPPNAME}

            Invoke-RestMethod -uri ${env:WEBHOOKURL} -Method Post -body $messageCardBody -ContentType ‘application/json’





    ####Production Release######

- stage: DeployToProduction
  displayName: Deploy Production
  dependsOn: 
  - BuildArtifact
  - DeployToStage
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy Producion
    environment: $(ENVIRONMENTSTG)
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          
          - task: AzureRmWebAppDeployment@4
            displayName: 'Azure App Service Deploy: $(WEBAPPNAME)'
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: '$(AZSUBSCRIPTON)'
              appType: 'webAppLinux'
              WebAppName: '$(WEBAPPNAME)'
              packageForLinux: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              RuntimeStack: 'NODE|14-lts'
              AppSettings: '-AZURE_STORAGE_CONNECTION_STRING $(AZURE_STORAGE_CONNECTION_STRING_PROD) -AZURE_STORAGE_CONTAINER $(AZURE_STORAGE_CONTAINER) -CSV_BLOB_FILE $(CSV_BLOB_FILE) -WEBSITE_RUN_FROM_PACKAGE $(WEBSITE_RUN_FROM_PACKAGE) -SCM_DO_BUILD_DURING_DEPLOYMENT $(SCM_DO_BUILD_DURING_DEPLOYMENT)'






#     ###### Teams Success Notification######

- stage: BuildNotificationsucceeded
  displayName: Teams Success Notification
  dependsOn: DeployToProduction
  condition: succeeded()
  jobs:
    - job: Notification
      steps:
      - checkout: none
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            # Write your PowerShell commands here.
            
           
            $messageCardBody=@"
            { "@type": "MessageCard", "@context": "https://schema.org/extensions", "summary": "1 new build message", "themeColor": "0078D7", "sections": [ { "activityImage": "https://cdn2.iconfinder.com/data/icons/weby-flat-vol-1/512/1_Approved-check-checkbox-confirm-green-success-tick-512.png", "activityTitle": "Notification", "activitySubtitle": "Build and Release", "facts": [ { "name": "EnvName:", "value": "Prodcution" }, { "name": "ApplicationName:", "value": "${env:WEBAPPNAME}" },{ "name": "BuildNumber:", "value": "$(Build.BuildNumber)" },{ "name": "BuildStatus:", "value": "$(Agent.JobStatus)" } ], "text": "Deployment to Prodcution", "potentialAction": [  ] } ] }
            "@
            echo ${messageCardBody}
            echo ${env:WEBAPPNAME}

            Invoke-RestMethod -uri ${env:WEBHOOKURL} -Method Post -body $messageCardBody -ContentType ‘application/json’

#     ###### Teams Failed Notification######

- stage: BuildNotificationFailed
  displayName: Teams Failed Notification
  dependsOn: DeployToProduction
  condition: Failed()
  jobs:
    - job: Notification
      steps:
      - checkout: none
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            # Write your PowerShell commands here.
            
           
            $messageCardBody=@"
            { "@type": "MessageCard", "@context": "https://schema.org/extensions", "summary": "1 new build message", "themeColor": "0078D7", "sections": [ { "activityImage": "https://icon-library.com/images/failed-icon/failed-icon-7.jpg", "activityTitle": "Notification", "activitySubtitle": "Build and Release", "facts": [ { "name": "EnvName:", "value": "Prodcution" }, { "name": "ApplicationName:", "value": "${env:WEBAPPNAME}" },{ "name": "BuildNumber:", "value": "$(Build.BuildNumber)" },{ "name": "BuildStatus:", "value": "Failed" } ], "text": "Deployment to Prodcution", "potentialAction": [  ] } ] }
            "@
            echo ${messageCardBody}
            echo ${env:WEBAPPNAME}

            Invoke-RestMethod -uri ${env:WEBHOOKURL} -Method Post -body $messageCardBody -ContentType ‘application/json’