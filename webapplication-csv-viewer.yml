# Node.js Express Web App to Linux on Azure
# Build a Node.js Express app and deploy it to Azure as a Linux web app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master

variables:

 

  # Agent VM image name
  vmImageName: 'windows-latest'

stages:
    ######Build######

- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '14.x'
      displayName: 'Install Node.js'

    - script: |
        npm install
        npm run build --if-present
        npm run test --if-present
      displayName: 'npm install, build and test'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

    #####Release######

- stage: Deploy
  displayName: Deploy stage
  #dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: Staging
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          # - task: AzureRmWebAppDeployment@4
          #   displayName: 'Azure App Service Deploy: $(WEBAPPNAME)'
          #   inputs:
          #     ConnectionType: 'AzureRM'
          #     azureSubscription: 'azconnection'
          #     appType: 'webAppLinux'
          #     WebAppName: $(WEBAPPNAME)
          #     packageForLinux: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
          #     RuntimeStack: 'NODE|14-lts'
          #     StartupCommand: 'npm run start'


          - task: AzureRmWebAppDeployment@4
            displayName: 'Azure App Service Deploy: webcsvviewerneuprodwa'
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'azconnection'
              appType: 'webAppLinux'
              WebAppName: 'webcsvviewerneuprodwa'
              packageForLinux: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              StartupCommand: 'npm run start'
              AppSettings: |
                PRE_BUILD_COMMAND=#!/bin/sh
                 rm -rf /home/site/wwwroot/*





# #     ###### Teams Success Notification######

# - stage: BuildNotificationsucceeded
#   displayName: Teams Success Notification
#   dependsOn: Deploy
#   condition: succeeded()
#   jobs:
#     - job: Notification
#       steps:
#       - checkout: none
#       - task: PowerShell@2
#         inputs:
#           targetType: 'inline'
#           script: |
#             # Write your PowerShell commands here.
            
           
#             $messageCardBody=@"
#             { "@type": "MessageCard", "@context": "https://schema.org/extensions", "summary": "1 new build message", "themeColor": "0078D7", "sections": [ { "activityImage": "https://cdn2.iconfinder.com/data/icons/weby-flat-vol-1/512/1_Approved-check-checkbox-confirm-green-success-tick-512.png", "activityTitle": "Notification", "activitySubtitle": "Build and Release", "facts": [ { "name": "EnvName:", "value": "${env:ENVIRONMENTNAME}" }, { "name": "ApplicationName:", "value": "${env:WEBAPPNAME}" },{ "name": "BuildNumber:", "value": "$(Build.BuildNumber)" },{ "name": "BuildStatus:", "value": "$(Agent.JobStatus)" } ], "text": "Deployment to ${env:ENVIRONMENTNAME}", "potentialAction": [  ] } ] }
#             "@
#             echo ${messageCardBody}
#             echo ${env:WEBAPPNAME}

#             Invoke-RestMethod -uri ${env:WEBHOOKURL} -Method Post -body $messageCardBody -ContentType ‘application/json’

# #     ###### Teams Failed Notification######

# - stage: BuildNotificationFailed
#   displayName: Teams Failed Notification
#   dependsOn: Deploy
#   condition: Failed()
#   jobs:
#     - job: Notification
#       steps:
#       - checkout: none
#       - task: PowerShell@2
#         inputs:
#           targetType: 'inline'
#           script: |
#             # Write your PowerShell commands here.
            
           
#             $messageCardBody=@"
#             { "@type": "MessageCard", "@context": "https://schema.org/extensions", "summary": "1 new build message", "themeColor": "0078D7", "sections": [ { "activityImage": "https://icon-library.com/images/failed-icon/failed-icon-7.jpg", "activityTitle": "Notification", "activitySubtitle": "Build and Release", "facts": [ { "name": "EnvName:", "value": "${env:ENVIRONMENTNAME}" }, { "name": "ApplicationName:", "value": "${env:WEBAPPNAME}" },{ "name": "BuildNumber:", "value": "$(Build.BuildNumber)" },{ "name": "BuildStatus:", "value": "Failed" } ], "text": "Deployment to ${env:ENVIRONMENTNAME}", "potentialAction": [  ] } ] }
#             "@
#             echo ${messageCardBody}
#             echo ${env:WEBAPPNAME}

#             Invoke-RestMethod -uri ${env:WEBHOOKURL} -Method Post -body $messageCardBody -ContentType ‘application/json’





